# c-program
// SList.h
#define _CRT_SECURE_NO_WARNINGS 1
#pragma once
#include<stdio.h>
#include<assert.h>
#include<stdlib.h>
typedef int SDataType;
//结点结构
typedef struct SListNode
{
	SDataType _data;
	struct SListNode* _pNEXT;
}Node;

//链表结构
typedef struct SList
{
	Node* _pHead;
}SList;

void SListInit(SList* pl);
// 销毁链表 
void SListDestroy(SList* pl);
// 在链表中尾插值为data的节点 
void SListPushBack(SList* pl, SDataType data);
void SListPopBack(SList* pl);
void SListPushFront(SList* pl, SDataType data);
void SListPopFront(SList* pl);
// 在链表pos位置后插入置为data的节点 
void SListInsertAfter(Node* pos, SDataType data);
// 删除链表中值为data的节点 
void SListErase(SList* pl, Node* pos);
// 在链表中查找值为data的节点，找到返回该节点的地址，否则返回空 
Node* SListFind(SList* pl, SDataType data);
// 获取链表中有效节点的个数 
int SListSize(SList* pl);
// 检测链表是否为空 
int SListEmpty(SList* pl);
// 获取链表的第一个节点 
Node* SListFront(SList* pl);

// 获取链表的第二个节点 
Node* SListBack(SList* pl);

void SListRemove(SList* pl, SDataType data);
void SListRemoveAll(SList* pl, SDataType data);
//////////////////////////////////////////////////////
//SList.c
#include "SList.h"
//链表初始化
void SListInit(SList* pl)
{
	assert(pl);
	pl->_pHead = NULL;
	
}
 //销毁链表 
void SListDestroy(SList* pl)
{
	assert(pl);
	Node* pCur = pl->_pHead;
	Node* pos = NULL;
	while (pCur)
	{
		pos = pCur;
		pCur = pCur->_pNEXT;
		free(pos);
	}
	pl->_pHead = NULL;//防止pl->_pHead 成为野指针！
}
 
Node* BuySListNode(SDataType data)
{
	Node* pNode = (Node*)malloc(sizeof(Node));
	if (pNode == NULL)
	{
		return NULL;
	}
	pNode->_data = data;
	pNode->_pNEXT = NULL;
	return pNode;
}
// 在链表中尾插值为data的节点
void SListPushBack(SList* pl, SDataType data)
{
	Node* pNewNode = NULL;
	Node* pCur = pl->_pHead;
	assert(pl);
	pNewNode = BuySListNode(data);
	if (pl->_pHead == NULL)
	{
		pl->_pHead = pNewNode;
		
	}
	else if (pl->_pHead->_pNEXT == NULL)
	{
		pl->_pHead->_pNEXT = pNewNode;
	}
	else
	{
		while (pCur->_pNEXT != NULL)
		{
			
			pCur = pCur->_pNEXT;
		}
		pCur->_pNEXT = pNewNode;
	}
	
}



// 删除链表最后一个节点 
void SListPopBack(SList* pl)
{

	assert(pl);
	Node* pCur = pl->_pHead;
	if (pl->_pHead == NULL)
		return;
	else if (pl->_pHead->_pNEXT == NULL)
	{
		free(pCur);
		pl->_pHead = NULL;
	}
	else  
	{
		while (pCur->_pNEXT->_pNEXT)
		{
			pCur = pCur->_pNEXT;
		}
		free(pCur->_pNEXT);
		pCur->_pNEXT = NULL;
	}
}
// 在链表第一个元素前插入值为data的节点 
void SListPushFront(SList* pl, SDataType data)
{
	Node* pNewNode = NULL;
	assert(pl);
	Node* pCur = pl->_pHead;
	pNewNode = BuySListNode(data);
	if (pl->_pHead == NULL)
	{
		pl->_pHead = pNewNode;
	}
	else

		pl->_pHead = pNewNode;
	    pNewNode->_pNEXT = pCur;

}

// 删除链表中第一个节点 
void SListPopFront(SList* pl)
{
	assert(pl);
	if (pl->_pHead == NULL)
	{
		return;
	}
	else if (pl->_pHead->_pNEXT == NULL)
	{
		free(pl->_pHead);
		pl->_pHead = NULL;
	}
	else
	{
		Node* pCur = pl->_pHead->_pNEXT;
		free(pl->_pHead);
		pl->_pHead = pCur;
	}
}

// 在链表中查找值为data的节点，找到返回该节点的地址，否则返回空 
Node* SListFind(SList* pl, SDataType data)
{
	assert(pl);
	Node* pCur = pl->_pHead;
	while (pCur)
	{
		if (pCur->_data == data)
		{
			return pCur;
		}
		pCur = pCur->_pNEXT;
	}
	return NULL;
}

// 在链表pos位置后插入置为data的节点 
void SListInsertAfter(Node* pos, SDataType data)
{
	Node* pNewNode = NULL;
	assert(pos);
	pNewNode = BuySListNode(data);
	if (pos == NULL)
		return;
	else
	{
		pNewNode->_pNEXT = pos->_pNEXT;
		pos->_pNEXT= pNewNode;
	}
}

// 删除链表中值为data的节点 
void SListErase(SList* pl, Node* pos)
{
	assert(pl);
	assert(pos);
	Node* pCur = pl->_pHead;
	if (pl->_pHead == NULL)
		return;
	else if (pCur == pos)
	{
		pl->_pHead = pos->_pNEXT;
		free(pos);
		pos = NULL;
	}
	else
	{
		while (pCur)
		{
			if (pCur->_pNEXT == pos)
			{
				break;
			}
			pCur = pCur->_pNEXT;
		}
		pCur->_pNEXT = pos->_pNEXT;
		free(pos);
	}
	
	/*pCur = pos->_pNEXT->_pNEXT;
	free(pos->_pNEXT);
	pos->_pNEXT = pCur;*/
}


// 获取链表中有效节点的个数 
int SListSize(SList* pl)
{
	assert(pl);
	int count = 0;
	Node* pCur = pl->_pHead;
	while (pCur)
	{
		count++;
		pCur = pCur->_pNEXT;
	}
	return count;
}
// 检测链表是否为空 
int SListEmpty(SList* pl)
{
	assert(pl);
	if (pl->_pHead == NULL)
	{
		return 1;
	}
	else
		return 0;
}
// 获取链表的第一个节点 
Node* SListFront(SList* pl)
{
	return pl->_pHead;
}

// 获取链表的第二个节点 
Node* SListBack(SList* pl)
{
	return pl->_pHead->_pNEXT;
}
void SListRemove(SList* pl, SDataType data)
{
	assert(pl);
	SListErase(pl, SListFind(pl, data));
}
void SListRemoveAll(SList* pl, SDataType data)
{
	assert(pl);
	int count = 0;
	Node* pCur = pl->_pHead;
	while (pCur)
	{
		if (pCur->_data == data)
		{
			count++;

		}
		pCur = pCur->_pNEXT;
	}
	while (count--)
	{
		SListRemove(pl, data);
	}

}
////////////////////////////////////////
//test.c
#include "SList.h"
void printfSList(SList* pl)
{
	assert(pl);
	Node* pCur = pl->_pHead;
	while (pCur)
	{

		printf("%d---> ", pCur->_data);
		pCur = pCur->_pNEXT;
	}
		printf("null\n");
		
	

}
void test1()
{
	SList s;
	SListInit(&s);


	SListPushBack(&s, 1);
	SListPushBack(&s, 2);
	SListPushBack(&s, 3);
	SListPushBack(&s, 2);
	SListPushBack(&s, 2);
	SListPushBack(&s, 4);
	/*printfSList(&s);
	SListPopBack(&s);*/
	/*printfSList(&s);
	SListPushFront(&s, 0);
	printfSList(&s);
	SListPopFront(&s);*/
	printfSList(&s);
	//SListFind(&s, 2);
	//SListInsertAfter(SListFind(&s, 2), 0);
	//printfSList(&s);
	//printf("%p\n", SListFind(&s, 1));
	/*SListErase(&s, SListFind(&s, 1));
	printfSList(&s);*/

	/*SListSize(&s);
	SListEmpty(&s);
	SListFront(&s);
	SListBack(&s);*/
	//SListRemove(&s, 2);
	SListRemoveAll(&s, 2);
	printfSList(&s);
	SListDestroy(&s);
}


int main()
{
	test1();
	system("pause");
	return 0;
}
