# c-program
#include<stdio.h>
#include<stdlib.h>
//1.
//写一个函数返回参数二进制中 1 的个数
//比如： 15 0000 1111 4 个 1
//程序原型：
//int count_one_bits(unsigned int value)
//{
//	// 返回 1的位数 
//}
//int count_one_bits(unsigned int value)
//{
//	int i = 0;
//	int count = 0;
//	for (i = 0; i < 32; i++)
//	{
//		if (value & 1 )
//		{
//			count++;
//		}
//		value >>= 1;
//	}
//	return count;
//}
//int main()
//{
//	int a = 15;
//	int ret = count_one_bits(a);
//	printf("%d", ret);
//	system("pause");
//	return 0;
//}
//第二种解法
/*int count_one_bits(unsigned int value)
{
	int count = 0;
	while (value)
	{
		count++;
		value = (value&(value - 1));//每进行一次 就会在二进制中消掉最后面的一个1
	}
	return count;
}
int main()
{
	int a = 15;
	int ret = count_one_bits(a);
	printf("%d", ret);
	system("pause");
	return 0;
}*/

//2.获取一个数二进制序列中所有的偶数位和奇数位，
//分别输出二进制序列。
//int main()
//{
//	int a = 10;
//	int i = 0;
//	for (i = 32; i >= 0; i -= 2)
//	{
//		printf("%d ",(a>>i) & 1);
//	}
//    printf("\n");
//	for (i = 31; i > 0; i -= 2)
//	{
//		printf("%d ", a>>i & 1);
//	}
//	system("pause");
//	return 0;
//}
//4.编程实现：
//两个int（32位）整数m和n的二进制表达中，有多少个位(bit)不同？
//输入例子 :
//1999 2299
//输出例子 : 7
//int count_one_bits(unsigned int value)
//{
//	int count = 0;
//	while (value)
//	{
//		count++;
//		value = (value&(value - 1));//每进行一次 就会在二进制中消掉最后面的一个1
//	}
//	return count;
//}
//int main()
//{
//	int a = 1999;
//	int b = 2299;
//	int k = a^b;
//	int ret = count_one_bits(k);
//	printf("%d ", ret);
//	system("pause");
//	return 0;
//}
